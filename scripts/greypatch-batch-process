#!/usr/bin/env python


"""

greypatch-batch-process

A utility for running greypatch pipeline on a folder of images.


See the help:

    greypatch --help

Usage Examples:

    Basic use:
        greypatch-batch-process --source_folder ~/Desktop/single_image --destination_folder ~/Desktop/test_out --filter_settings ~/Desktop/default_filter.yml

    Use a scale card:
        greypatch-batch-process --scale_card_side_length 5 --source_folder ~/Desktop/single_image --destination_folder ~/Desktop/test_out --filter_settings ~/Desktop/default_filter.yml

    Use a known scale
        greypatch-batch-process --pixels_per_cm 412 --source_folder ~/Desktop/single_image --destination_folder ~/Desktop/test_out --filter_settings ~/Desktop/default_filter.yml

    Create a default filter settings YAML file:
        greypatch-batch-process --create_default_filter ~/Desktop/default_filter.yml

    Set up for webtool use:

        when user selects scale card and gives image with card in

            greypatch-batch-process --use_on_server --source_folder  /var/www/tmp_folder_id --destination_folder /var/www/tmp_folder_out --filter_settings /var/www/tmp_folder_id/default_filter.yml --scale_image_name /var/www/tmp/scale_img.jpg

        when user doesn't have a scale card image

            greypatch-batch-process --use_on_server --source_folder  /var/www/tmp_folder_id --destination_folder /var/www/tmp_folder_out --filter_settings /var/www/tmp_folder_id/default_filter.yml

"""


import greypatch as rp
import os
import sys
import pandas as pd
import argparse
from pathlib import Path

parser = argparse.ArgumentParser(add_help=True, formatter_class=argparse.RawDescriptionHelpFormatter, description = """

greypatch-batch-process

A utility for running greypatch pipeline on a folder of images.


See the help:

    greypatch --help

Usage Examples:

    Basic use:
        greypatch-batch-process --source_folder ~/Desktop/single_image --destination_folder ~/Desktop/test_out --filter_settings ~/Desktop/default_filter.yml  --pixels_per_cm 412 --min_lesion_area 0.001

    Use a scale card:
        greypatch-batch-process --scale_card_side_length 5 --source_folder ~/Desktop/single_image --destination_folder ~/Desktop/test_out --filter_settings ~/Desktop/default_filter.yml

    Use a known scale
        greypatch-batch-process --pixels_per_cm 412 --source_folder ~/Desktop/single_image --destination_folder ~/Desktop/test_out --filter_settings ~/Desktop/default_filter.yml  --pixels_per_cm 412 --min_lesion_area 0.001

    Create a default filter settings YAML file:
        greypatch-batch-process --create_default_filter ~/Desktop/default_filter.yml
        
     
""")

parser.add_argument("-s","--source_folder", help='folder containing images to analyse', type = str)
parser.add_argument("-d","--destination_folder", help='folder to write output. Created if does not exist. ')
parser.add_argument("-f", "--filter_settings", help="file of filter settings to use.", default="default_filter.yml",type=str )
parser.add_argument("-c", "--create_default_filter", help="creates a default filter file of name provided and exits", default=False, type=str)
parser.add_argument("-l", "--scale_card_side_length", help="find a scale card in each image and calculate pixels per centimetre", default=False)
parser.add_argument("-p", "--pixels_per_cm", help="use a previously known value for pixels per centimetre", default=False, type=float)
parser.add_argument("-a", "--min_lesion_area", help="the minimum area a lesion can be to be retained", default=False, type=float)
args = parser.parse_args()




if args.create_default_filter:
    fs = rp.FilterSettings()
    fs.create_default_filter_file(args.create_default_filter)
    sys.exit("Written default filter file to {}".format(args.create_default_filter))
elif not args.source_folder or not args.destination_folder:
    parser.print_help(sys.stderr)
    sys.exit('source and destination folder must be provided')

if not os.path.exists(args.source_folder):
    parser.print_help(sys.stderr)
    sys.exit("source folder {} does not exist".format(args.source_folder))

if not os.path.exists(args.destination_folder):
    os.mkdir(args.destination_folder)

if not os.path.exists(args.filter_settings):
    parser.print_help(sys.stderr)
    sys.exit("filter settings file {} does not exist".format(args.filter_settings))

if args.scale_card_side_length and args.pixels_per_cm:
    parser.print_help(sys.stderr)
    sys.exit("scale card side length AND pixels per cm supplied. Can only work with one.")

if not args.scale_card_side_length and not args.pixels_per_cm:
    parser.print_help(sys.stderr)
    sys.exit("need exactly one of --scale_card_side_length or --pixels_per_cm")

def _get_scale_card(imfile, fs, side_length):
    im = rp.load_as_hsv(imfile)
    return rp.griffin_scale_card(im, h=fs['scale_card']['h'],
                                             s=fs['scale_card']['s'],
                                             v=fs['scale_card']['v'],
                                       side_length=side_length
                                       )

def _write_out(file, df, index=False):
    with open(file, "w") as out:
        out.write(df.to_csv(index=index))

def _write_summary(dfs, destination_folder, scale = None):
    df = pd.concat(dfs, sort=True)
    cols = ['image_file', 'sub_image_index', 'area_type']
    
    summarised = (df.drop(['label'], axis=1)
              .groupby(cols)
              .sum())
    if scale:
        l = len(summarised)
        summarised.insert(0, "scale", [scale] * l, True) #always 4 rows [

    _write_out(os.path.join(destination_folder, "summary_results.csv"), summarised, index=False)

def _write_tidy(dfs, destination_folder, name="raw_results.csv"):
    df = pd.concat(dfs, sort = True)
    _write_out(os.path.join(destination_folder, name), df, index=False)

def _find_scale(imfile, fs, side_length, pixels_per_cm):
        if side_length:
            scale = _get_scale_card(imfile, fs, side_length)
            if not scale:
                raise ValueError("No scale card pixel value returned; likely scale card not found in image.")
            return scale
        elif pixels_per_cm:
            return pixels_per_cm
        else:
            return None

def batch_process(folder=".", settings="settings.yml"):
    fs = rp.FilterSettings()
    fs.read(settings)
    SCALE = None
    PIXEL_LENGTH = None

    if args.scale_card_side_length and not "scale_card" in fs:
        raise ValueError("scale card side length provided but no scale card image options present in FilterSettings")



    image_files = [str(file.resolve()) for file in Path(folder).iterdir() if
                   file.is_file() and not file.name.startswith(".")]
    raw_dfs = []
    match_dfs = []

    for imfile in image_files:
        print("...doing image {}".format(imfile), file=sys.stderr)
        SCALE = _find_scale(imfile, fs, args.scale_card_side_length, args.pixels_per_cm)
        PIXEL_LENGTH = 1/SCALE
        sub_ims = rp.subimage.get_sub_images(imfile, file_settings = fs, dest_folder = args.destination_folder, min_lesion_area = args.min_lesion_area, scale = SCALE, pixel_length = PIXEL_LENGTH)
        for s in sub_ims:
            s.write_sub_image()
            s.write_annotated_sub_image()
            rdf = s.create_results_dataframe()
            raw_dfs.append(rdf)
            match_dfs.append(rp.subimage._make_match_dataframe(rdf))
    
    #_write_summary(all_dfs, args.destination_folder, scale = SCALE)
    _write_tidy(raw_dfs, args.destination_folder, name="raw_results.csv")
    _write_tidy(match_dfs, args.destination_folder, name="matched_results.csv")

if __name__ == '__main__':
    batch_process(folder=args.source_folder, settings=args.filter_settings)


